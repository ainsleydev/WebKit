package payload

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/ainsleyclark/go-payloadcms"
	"github.com/perimeterx/marshmallow"

	"github.com/ainsleydev/webkit/pkg/cache"
	"github.com/ainsleydev/webkit/pkg/webkit"
)

// SettingsContextKey defines the key for obtaining the settings
// from the context.
const SettingsContextKey = "payload_settings"

// ErrSettingsNotFound is returned when the settings are not found in the context.
var ErrSettingsNotFound = errors.New("settings not found in context")

// SettingsMiddleware defines the structure of the settings within the Payload UI.
func SettingsMiddleware(client *payloadcms.Client, store cache.Store) webkit.Plug {
	return GlobalsMiddleware[Settings](client, store, "settings")
}

// GetSettings is a helper function to get the settings from the context.
// If the settings are not found, it returns an error.
func GetSettings(ctx context.Context) (*Settings, error) {
	s := ctx.Value(SettingsContextKey)
	if s == nil {
		return nil, ErrSettingsNotFound
	}
	return s.(*Settings), nil
}

// MustGetSettings is a helper function to get the settings from the context.
// If the settings are not found, it logs an error and returns nil.
func MustGetSettings(ctx context.Context) *Settings {
	s, err := GetSettings(ctx)
	if err != nil {
		slog.Error("Obtaining settings: " + err.Error())
	}
	return s
}

// Settings defines the common global collection type within Payload
// that allows users to change site settings.
type Settings struct {
	Id            float64        `json:"id"`
	SiteName      *string        `json:"siteName,omitempty"`
	TagLine       *string        `json:"tagLine,omitempty"`
	Locale        string         `json:"locale,omitempty"` // In en_GB format
	Logo          *int           `json:"logo,omitempty"`
	Meta          Meta           `json:"meta"`
	Robots        *string        `json:"robots,omitempty"`
	CodeInjection *CodeInjection `json:"codeInjection,omitempty"`
	Maintenance   *Maintenance   `json:"maintenance,omitempty"`
	Contact       *Contact       `json:"contact,omitempty"`
	Social        *Social        `json:"social,omitempty"`
	Address       *Address       `json:"address,omitempty"`
	UpdatedAt     *time.Time     `json:"updatedAt,omitempty"`
	CreatedAt     *time.Time     `json:"createdAt,omitempty"`
	Extra         map[string]any `json:"-"` // Extra fields that are not defined in the struct.
}

// Meta defines the data generated by the SEO plugin from Payload
// along with additional fields such as Private & Canonical.
//
// The SEO plugin appears in the majority of collections and in both
// the Global Settings and Page level fields.
type Meta struct {
	Title          *string `json:"title,omitempty"`
	Description    *string `json:"description,omitempty"`
	Image          Media   `json:"image,omitempty"` // TODO: This perhaps is an image struct.
	Private        *bool   `json:"private,omitempty"`
	CanonicalURL   *string `json:"canonicalURL,omitempty"`
	StructuredData any     `json:"structuredData,omitempty"`
}

// CodeInjection defines the fields for injecting code into the head
// or foot of the frontend.
type CodeInjection struct {
	Footer *string `json:"footer,omitempty"`
	Head   *string `json:"head,omitempty"`
}

// Maintenance defines the fields for displaying an offline page to
// the front-end when it's been enabled within PayloadCMS.
type Maintenance struct {
	Content *string `json:"content,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// Contact defines the fields for contact details for the company.
type Contact struct {
	Email     *string `json:"email,omitempty"`
	Telephone *string `json:"telephone,omitempty"`
}

// Address defines the fields for a company address.
type Address struct {
	City     *string `json:"city,omitempty"`
	Country  *string `json:"country,omitempty"`
	County   *string `json:"county,omitempty"`
	Line1    *string `json:"line1,omitempty"`
	Line2    *string `json:"line2,omitempty"`
	Postcode *string `json:"postcode,omitempty"`
}

// Social defines the fields for social media links.
type Social struct {
	Facebook  *string `json:"facebook,omitempty"`
	Instagram *string `json:"instagram,omitempty"`
	LinkedIn  *string `json:"linkedIn,omitempty"`
	Tiktok    *string `json:"tiktok,omitempty"`
	X         *string `json:"x,omitempty"`
	Youtube   *string `json:"youtube,omitempty"`
}

// UnmarshalJSON unmarshals the JSON data into the Settings type.
// This method is used to extract known fields and assign the remaining
// fields to the Extra map.
func (s *Settings) UnmarshalJSON(data []byte) error {
	var temp Settings
	result, err := marshmallow.Unmarshal(data,
		&temp,
		marshmallow.WithExcludeKnownFieldsFromMap(true),
	)
	if err != nil {
		return err
	}

	*s = temp
	s.Extra = result

	return nil
}
