// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ainsleydev/webkit/pkg/apis/payloadcms (interfaces: CollectionService)
//
// Generated by this command:
//
//	mockgen -package=payloadfakes -destination=payloadfakes/collection.go . CollectionService
//
// Package payloadfakes is a generated GoMock package.
package payloadfakes

import (
	context "context"
	reflect "reflect"

	payloadcms "github.com/ainsleydev/webkit/pkg/apis/payloadcms"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionService is a mock of CollectionService interface.
type MockCollectionService struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionServiceMockRecorder
}

// MockCollectionServiceMockRecorder is the mock recorder for MockCollectionService.
type MockCollectionServiceMockRecorder struct {
	mock *MockCollectionService
}

// NewMockCollectionService creates a new mock instance.
func NewMockCollectionService(ctrl *gomock.Controller) *MockCollectionService {
	mock := &MockCollectionService{ctrl: ctrl}
	mock.recorder = &MockCollectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionService) EXPECT() *MockCollectionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCollectionService) Create(arg0 context.Context, arg1 payloadcms.Collection, arg2 any) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCollectionServiceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCollectionService)(nil).Create), arg0, arg1, arg2)
}

// DeleteByID mocks base method.
func (m *MockCollectionService) DeleteByID(arg0 context.Context, arg1 payloadcms.Collection, arg2 int) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCollectionServiceMockRecorder) DeleteByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCollectionService)(nil).DeleteByID), arg0, arg1, arg2)
}

// FindById mocks base method.
func (m *MockCollectionService) FindById(arg0 context.Context, arg1 payloadcms.Collection, arg2 int, arg3 any) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCollectionServiceMockRecorder) FindById(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCollectionService)(nil).FindById), arg0, arg1, arg2, arg3)
}

// FindBySlug mocks base method.
func (m *MockCollectionService) FindBySlug(arg0 context.Context, arg1 payloadcms.Collection, arg2 string, arg3 any) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlug", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlug indicates an expected call of FindBySlug.
func (mr *MockCollectionServiceMockRecorder) FindBySlug(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlug", reflect.TypeOf((*MockCollectionService)(nil).FindBySlug), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockCollectionService) List(arg0 context.Context, arg1 payloadcms.Collection, arg2 payloadcms.ListParams, arg3 any) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCollectionServiceMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCollectionService)(nil).List), arg0, arg1, arg2, arg3)
}

// UpdateByID mocks base method.
func (m *MockCollectionService) UpdateByID(arg0 context.Context, arg1 payloadcms.Collection, arg2 int, arg3 any) (payloadcms.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(payloadcms.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCollectionServiceMockRecorder) UpdateByID(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCollectionService)(nil).UpdateByID), arg0, arg1, arg2, arg3)
}
